### Functions for Calculating global TMB from whole exome mutation data

abridge <- function(maf_file, nonsilent = TRUE) {
# Takes a maf file and selects the characteristics required to perform TMB analysis
# and removes duplicate entries (which exist for a variety of reasons, consult
# the TCGA website)
# Requires tidyverse
    
    if ("Start_position" %in% colnames(maf_file)) {
        maf_file <- rename(maf_file, replace = c("Start_position" = "Start_Position"))
    }
    
    if ("End_position" %in% colnames(maf_file)) {
        maf_file <- rename(maf_file, replace = c("End_position" = "End_Position"))
    }
    
    data_abridged <- maf_file %>% 
       select(Hugo_Symbol, Chromosome, Start_Position, End_Position, Variant_Classification, Variant_Type, Tumor_Sample_Barcode) %>% 
        distinct()

    if (nonsilent == TRUE) {
        data_abridged <- data_abridged %>% 
            filter(Variant_Classification %in% c('Frame_Shift_Del', 'Frame_Shift_Ins', 'In_Frame_Del', 'In_Frame_Ins', 'Missense_Mutation', 'Nonsense_Mutation', 'Nonstop_Mutation', 'Splice_Site', 'Translation_Start_Site'))
              }
    return(data_abridged)
}

cbio_getData <- function(path_name, cancer_type = "All", by_cancer = FALSE, test = TRUE, training = 0.7, nonsilent = TRUE) {
    
    data <- as_tibble(data.frame(Hugo_Symbol = character(0), Chromosome = character(0), 
                                 Start_Position = numeric(0), End_Position = numeric(0), 
                                 Variant_Classification = character(0), Variant_Type = character(0), 
                                 Tumor_Sample_Barcode = character(0)))
    
    for (i in 1:length(dir(path_name))) {
        
        if ("data_mutations_extended.txt" %in% dir(paste0(path_name, "/", dir(path_name)[i]))) {
            study_meta <- read_tsv(paste0(path_name, "/", dir(path_name)[i], "/meta_study.txt"), col_names = FALSE, comment = "#")
            cancer <- substr(study_meta[1,],17,nchar((study_meta[1,])))
            
            if (cancer == cancer_type) {
                print(dir(path_name)[i])
                new_data <- read_tsv(paste0(path_name, "/", dir(path_name)[i], "/data_mutations_extended.txt"), comment = "#") 
                if (all(substr(new_data$Chromosome, 1, 3) == "chr")) {
                    new_data$Chromosome <- substr(new_data$Chromosome, 4, 6)
                }
                new_data <- abridge(new_data, nonsilent)
                print(new_data %>% 
                         count(Tumor_Sample_Barcode) %>% 
                         nrow())
                data <- bind_rows(data, new_data)  
            }
        }
    }
    print(data %>% 
             count(Tumor_Sample_Barcode) %>% 
             nrow())
    if (test == TRUE) {
        tumor_ids <- unique(data$Tumor_Sample_Barcode)
        
        training_sample <- sample(length(tumor_ids), floor(training*length(tumor_ids)))
        test_sample <- setdiff(1:length(tumor_ids), training_sample)
        print(length(training_sample))
        print(length(test_sample))
        training_ids <- tumor_ids[training_sample]
        test_ids <- tumor_ids[test_sample]
        
        training_data <- data %>% 
            filter(Tumor_Sample_Barcode %in% training_ids)
        test_data <- data %>% 
            filter(Tumor_Sample_Barcode %in% test_ids)
        
        return(list(training_ids, test_ids, training_data, test_data))
    }
    else {
        return(data)
    }
}

cbio_getCancerTypes <- function(path_name) {
    cancer_types <- c()
    for (i in 1:length(dir(path_name))) {
        if (!("data_mutations_extended.txt" %in% dir(paste0(path_name, "/", dir(path_name)[i])))) {
            print(paste0("Their is no mutations file in ", dir(path_name)[i]))
        }
        else {
            study_meta <- read_tsv(paste0(path_name, "/", dir(path_name)[i], "/meta_study.txt"), col_names = FALSE, comment = "#")
            cancer <- substr(study_meta[1,],17,nchar((study_meta[1,])))
            cancer_types <- unique(c(cancer_types, cancer))
        }
    }
    return(cancer_types)
}

TMB_Calc <- function(maf_file, nonsilent = TRUE) {
# Takes a maf file and outputs a table with tumor sample barcode and TMB value
# Requires tidyverse to be installed
# Depends on previous function 'abridge()'
    
    tmb_table <-  maf_file %>%  
                abridge(nonsilent = nonsilent) %>% 
                group_by(Tumor_Sample_Barcode) %>% 
                summarise(TMB = n()/30)
    
    return(tmb_table)
}


### Functions for calculating association local vs global for a given window 

Local_TMB_Calc <- function(maf_file, Chrom, Start, Window_Size, ns = FALSE, pre_abridged = FALSE) {
# takes a maf file and outputs a table with tumor sample barcode and local TMB 
# value for the window specified via chromosome, start position and window size
# requires tidyverse to be installed
# requires function 'abridge()'
    
    all_samples <- tibble(Tumor_Sample_Barcode = unique(maf_file$Tumor_Sample_Barcode))
    
    if (pre_abridged == FALSE) {
        maf_file <- abridge(maf_file, nonsilent = ns)
    }
    
    local_tmb_table  <- maf_file %>% 
        filter(Chromosome == Chrom) %>% 
        filter(Start_Position %in% (Start + 0:(Window_Size-1))) %>% 
        group_by(Tumor_Sample_Barcode) %>% 
        summarise(Local_TMB = n())
    
    local_tmb_table <- full_join(all_samples, local_tmb_table, by = "Tumor_Sample_Barcode")
    local_tmb_table[is.na(local_tmb_table)] <- 0
    
    return(local_tmb_table)
}

getSignificance <- function(local_tmb_table, global_tmb_table) {
# Takes a local tmb table and a global tmb table and returns the significance of their correlation
# Not currently set up to account for multiple testing
# Requires tidyverse
    
    comparison_table <- inner_join(local_tmb_table, global_tmb_table,
           by = "Tumor_Sample_Barcode") 
    #creates a table with Tumor sample barcode, global burden and local burden
    
    if (sum(comparison_table$Local_TMB != 0) > 0) {
    return(-log(summary(lm(TMB~Local_TMB, comparison_table))$coefficients[2,4]))
        }
    else {
        return(0)
    }
}
    

### Functions for a first pass window algorithm
"
chromosome_slide <- function(maf_file, global_tmb_table = NULL, Chromosome, window_size, jump_length, ns = FALSE) {
# performs a sliding window algorithm on one chromosome
# outputs a vector of significances
# can be given a global tmb table, otherwise will calculate itself
# requires a genome to be loaded under name 'genome', ideally GChr37
# requires packages tidyverse, BSGenome and functions abridge, TMB_Calc, Local_TMB_Calc and getSignificance 
    
# NOTE there's a weird thing going on at the moment where 'global_tmb_table = NULL' must be explicitly fed 
# to the function, else it doesn't work
    
    chromosomes <- c(1:22, 'X', 'Y')
    maf_file <- abridge(maf_file, nonsilent = ns)
    
    
    if (is.null(global_tmb_table)) {
        global_tmb_table <- TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    significance_vector <- c()
    position_vector <- c()
    chromosome_length <- length(genome[[which(chromosomes == Chromosome)]])
    
    
    for (position in seq(from = 1, to = chromosome_length - window_size, by = jump_length)) { 
        
        local_tmb_table <- Local_TMB_Calc(maf_file, Chrom = Chromosome, Start = position, Window_Size = window_size, pre_abridged = TRUE)
        significance_vector <- c(significance_vector, getSignificance(local_tmb_table, global_tmb_table))
        position_vector <- c(position_vector, position)
        
    
    } 
    
    len <- length(significance_vector)
    chromosome_vector <- rep(Chromosome, len)
    key_vector <- (1:len)/len
    
    return(tibble(chromosome = chromosome_vector, position = position_vector, key = key_vector, significance = significance_vector))
    
}
"

chromosome_slide <- function(maf_file, global_tmb_table = NULL, Chromosome, window_size, jump_length, ns = FALSE) {
# performs a sliding window algorithm on one chromosome
# outputs a vector of significances
# can be given a global tmb table, otherwise will calculate itself
# requires a genome to be loaded under name 'genome', ideally GChr37
# requires packages tidyverse, BSGenome and functions abridge, TMB_Calc, Local_TMB_Calc and getSignificance 
    
# NOTE there's a weird thing going on at the moment where "global_tmb_table = NULL" must be explicitly fed 
# to the function, else it doesn't work
    
    chromosomes <- c(1:22, "X", "Y")
    maf_file <- abridge(maf_file, nonsilent = ns)
    
    
    if (is.null(global_tmb_table)) {
        global_tmb_table <- TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    chromosome_length <- length(genome[[which(chromosomes == Chromosome)]])
    position_vector <- seq(from = 1, to = chromosome_length - window_size, by = jump_length)
    len <- length(position_vector)
    key_vector <- (1:len)/len
    chromosome_vector <- rep(Chromosome, len)
    significance_vector <- map_dbl(position_vector, ~Local_TMB_Calc(maf_file, Chrom = Chromosome, Start = .x, Window_Size = window_size, pre_abridged = TRUE) %>% 
                                                      getSignificance(global_tmb_table))
    
    return(tibble(chromosome = chromosome_vector, position = position_vector, key = key_vector, significance = significance_vector))
    
}


genome_slide <- function(maf_file, global_tmb_table = NULL, window_size, jump_length, ns = FALSE) {
   
    maf_file <- abridge(maf_file, nonsilent = ns)
    chromosomes <- c(1:22,"X","Y")
    
    if (is.null(global_tmb_table)) {
        global_tmb_table = TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    genome_association <- tibble(chromosome = character(), position = vector(), key = vector(), significance = vector())
    
    
    for (n in 1:24) {
        print(chromosomes[n])
        genome_association <- bind_rows(genome_association, chromosome_slide(maf_file, global_tmb_table, chromosomes[n], window_size, jump_length))   
    }
    
    return(genome_association)
    
}

"
chromosome_restricted_slide <- function(maf_file, previous_run, zoom = 10, global_tmb_table = NULL, Chromosome, ns = FALSE, coverage = 10) {

 
    chromosomes <- c(1:22, 'X', 'Y')
maf_file <- abridge(maf_file, nonsilent = ns)
    
    old_jump_length <- as.numeric(previous_run[2,'position'] - previous_run[1,'position'])
    
    new_jump_length <- max(1,floor(old_jump_length/zoom))
    new_window_size <- coverage*new_jump_length
    
    quant <- 1 - 1/zoom
    
    significant_positions <- previous_run %>% 
        filter(significance > quantile(significance, quant)) %>% 
        filter(chromosome == Chromosome)  
        
    
    chromosome_positions <- c()
    for (position in significant_positions$position) {
        chromosome_positions <- c(chromosome_positions, seq(from = position, to = position + old_jump_length - new_jump_length, by = new_jump_length))
    }
    
    if (is.null(global_tmb_table)) {
        global_tmb_table <- TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    significance_vector <- c()
    position_vector <- c()
    chromosome_length <- length(genome[[which(chromosomes == Chromosome)]])
    
    
    for (position in chromosome_positions) { 
        local_tmb_table <- Local_TMB_Calc(maf_file, Chrom = Chromosome, Start = position, Window_Size = new_window_size, pre_abridged = TRUE)
        significance_vector <- c(significance_vector, getSignificance(local_tmb_table, global_tmb_table))
    } 
    
    len <- length(significance_vector)
    chromosome_vector <- rep(Chromosome, len)
    key_vector <- (1:len)/len
    
    if (len > 0) {
        return(tibble(chromosome = chromosome_vector, position = chromosome_positions, key = key_vector, significance = significance_vector))
    }
    else {
        return(tibble(chromosome = character(), position = vector(), key = vector(), significance = vector()))
    } 
    
}
"

chromosome_restricted_slide <- function(maf_file, previous_run, zoom = 10, global_tmb_table = NULL, Chromosome, ns = FALSE, coverage = 10) {

 
    chromosomes <- c(1:22, "X", "Y")
maf_file <- abridge(maf_file, nonsilent = ns)
    
    old_jump_length <- as.numeric(previous_run[2,"position"] - previous_run[1,"position"])
    
    new_jump_length <- max(1,floor(old_jump_length/zoom))
    new_window_size <- coverage*new_jump_length
    
    quant <- 1 - 1/zoom
    
    significant_positions <- previous_run %>% 
        filter(significance > quantile(significance, quant)) %>% 
        filter(chromosome == Chromosome)  
        
    
    chromosome_positions <- c()
    for (position in significant_positions$position) {
        chromosome_positions <- c(chromosome_positions, seq(from = position, to = position + old_jump_length - new_jump_length, by = new_jump_length))
    }
    
    if (is.null(global_tmb_table)) {
        global_tmb_table <- TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    len <- length(chromosome_positions)
    chromosome_vector <- rep(Chromosome, len)
    key_vector <- (1:len)/len
    significance_vector <- map_dbl(chromosome_positions, ~Local_TMB_Calc(maf_file, Chrom = Chromosome, Start = .x, Window_Size = new_window_size, pre_abridged = TRUE) %>% 
                                                              getSignificance(global_tmb_table))
      
    if (len > 0) {
        return(tibble(chromosome = chromosome_vector, position = chromosome_positions, key = key_vector, significance = significance_vector))
    }
    else {
        return(tibble(chromosome = character(), position = vector(), key = vector(), significance = vector()))
    } 
    
}


genome_restricted_slide <- function(maf_file, previous_run, zoom = 10, global_tmb_table = NULL, ns = FALSE, coverage = 10) {
   
    maf_file <- abridge(maf_file, nonsilent = ns)
    chromosomes <- c(1:22,"X","Y")
    
    if (is.null(global_tmb_table)) {
        global_tmb_table = TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    genome_association <- tibble(chromosome = character(), position = vector(), key = vector(), significance = vector())
    
    
    for (n in 1:24) {
        print(chromosomes[n])
        genome_association <- bind_rows(genome_association, chromosome_restricted_slide(maf_file, previous_run, zoom = 10, global_tmb_table = NULL, Chromosome = chromosomes[n], ns = FALSE, coverage = 10))   
       
    }
    
    return(genome_association)
    
}
    
RLL_slide <- function(maf_file, starting_window, iterations, zoom, coverage) {
# Compiles a dataframe with iterations in one column and the dataframes giving the
# results of that result of iteration in another
    
    global_tmb_table <- TMB_Calc(maf_file, nonsilent = TRUE)
    
    window_size <- starting_window
    jump_length <- as.integer(window_size/coverage)
    
    full_positions <- genome_slide(maf_file, global_tmb_table, window_size, jump_length)
    
    full_positions$iteration <- rep(1, nrow(full_positions))
    old_positions <- full_positions
    
    for (index in 2:iterations) {
        window_size <- as.integer(window_size/zoom)
        jump_length <- as.integer(jump_length/zoom)
        
        new_positions <- genome_restricted_slide(maf_file, old_positions, zoom, global_tmb_table, coverage)
        new_positions$iteration <- rep(index, nrow(new_positions))
        
        full_positions <- bind_rows(full_positions, new_positions)
        old_positions <- new_positions
    }
    
    full_positions <- full_positions %>% 
        group_by(iteration) %>% 
        nest()    
    
    full_positions$jump_length <- (starting_window/coverage)/(zoom**(full_positions$iteration - 1))
    
    return(full_positions)
    
}
    

### Functions for producing a training matrix

getWindows <- function(window_run, panel_size, coverage) {
    
    working_panel <- tibble(chromosome = factor(character(), levels = c(1:22, "X", "Y")), position = vector())
    jump_length <- (window_run[2,"position"] - window_run[1, "position"])[1,1]
   
    window_size <- coverage*jump_length
    adding <- TRUE
    
    while (adding) {
        new_position <- window_run %>% 
            filter(significance == max(significance)) %>% 
            filter(chromosome == min(chromosome)) %>% 
            filter(position == min(position)) %>% 
            select(chromosome, position)
        
        if (nrow(working_panel %>% 
            add_row(chromosome = rep(new_position$chromosome[1], coverage), position = new_position$position[1] + jump_length*(0:(coverage-1))) %>% 
            distinct())*jump_length <= panel_size) {
            
            working_panel <- working_panel %>% 
                add_row(chromosome = rep(new_position$chromosome[1], coverage), position = new_position$position[1] + jump_length*(0:(coverage-1))) %>% 
                distinct() %>% 
                group_by(chromosome) %>% 
                arrange(position, .by_group = TRUE) %>% 
                ungroup()
            
        
            window_run <- window_run %>% 
                filter((chromosome != new_position$chromosome)|(position != new_position$position))
        }
        else {
            adding <- FALSE
        }
    }
    
    return(working_panel)
}

getMatrix <- function(maf_file, candidate_panel, jump_length, global_tmb_table = NULL, ...) {
    
    maf_file <- abridge(maf_file, nonsilent = FALSE)
    
    if (is.null(global_tmb_table)) {
        global_tmb_table = TMB_Calc(maf_file, nonsilent = TRUE)
    }
    
    window_matrix <- global_tmb_table
    
    for (n in 1:nrow(candidate_panel)) {
        
        new_column <- maf_file %>% 
            filter(Chromosome == candidate_panel$chromosome[n], 
                   Start_Position %in% (candidate_panel$position[n] + 0:(jump_length - 1))) %>%
            group_by(Tumor_Sample_Barcode) %>% 
            summarise(Window = n())
    
        colnames(new_column) <- c("Tumor_Sample_Barcode", paste0("Window_", n))
        window_matrix <- full_join(window_matrix, new_column, by = "Tumor_Sample_Barcode")
        
    }
    
    window_matrix[is.na(window_matrix)]  <- 0
    return(window_matrix)
}


RLL_windows <- function(new_data, slide_run, starting_window, coverage) {
    x <- mutate(slide_run, windows = map(data, ~getWindows(.x, starting_window, coverage)))
    x <- mutate(x, matrices = pmap(x, ~getMatrix(maf_file = new_data, candidate_panel = ..4, jump_length = ..3)))

    return(x)   
}

### Functions for making an OLM out of data

getModel <- function(matrix) {
    
    formula <- matrix %>% 
        select(starts_with("Window")) %>% 
        select(which(colSums(.) > 0)) %>% 
        colnames() %>% 
        paste(collapse = "+") %>% 
        paste("TMB ~", .) %>% 
        as.formula()
    
    fit <- lm(formula, matrix)
    
    return(fit)  
}


RLL_models <- function(rll_matrices) {
    return(mutate(rll_matrices, models = map(matrices, getModel)))
}

### Functions for validating OLM models

getTestMatrix <- function(test_data, model_windows, jump_length) {
    
    test_data <- abridge(test_data)   
    window_matrix <- TMB_Calc(test_data)
    
    for (n in 1:nrow(model_windows)) {
        new_column <- test_data %>% 
            filter(Chromosome == model_windows$chromosome[n],
                   Start_Position %in% (model_windows$position[n] + 0:(jump_length - 1)))  %>% 
            group_by(Tumor_Sample_Barcode) %>% 
            summarise(Window = n())
        colnames(new_column) <- c("Tumor_Sample_Barcode", paste0("Window_", n))
        window_matrix <- full_join(window_matrix, new_column, by = "Tumor_Sample_Barcode")  
    }
    
    window_matrix[is.na(window_matrix)] <- 0
    return(window_matrix)
    
}


testModel <- function(model, window_matrix, type = "R", threshold = 20) {
    comparison <- tibble(prediction = predict(model, window_matrix), actual = window_matrix$TMB)
    
    if (type == "R") {
        return(broom::glance(lm(actual~prediction, comparison))$r.squared)
    }
    
    if (type == "C") {
        comparison <- comparison %>% 
            mutate(predicted_tmb_high = prediction >= threshold,
                   actual_tmb_high = actual >= threshold)
        
        high <- comparison %>% 
                    filter(actual_tmb_high == TRUE)
        low <- comparison %>% 
                    filter(actual_tmb_high == FALSE)
        correct_high <- high %>% 
                            filter(predicted_tmb_high == TRUE)
        correct_low <- low %>% 
                            filter(predicted_tmb_high == FALSE)
        
        return(tibble(sensitivity = c(nrow(correct_high)/nrow(high)),
                      specificity = c(nrow(correct_low)/nrow(low))))
    }
}



